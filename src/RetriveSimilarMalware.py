#  <#Retrive similar#>
import numpy as np
from sklearn.metrics.pairwise import linear_kernel
from pyLZJD import digest, sim
import json
import pickle
import argparse

if __name__ == '__main__':
    def find_most_similar_files(newfile, tdm, count):
        cosine_similarities = linear_kernel(newfile, tdm).flatten()
        related_product_indices = cosine_similarities.argsort()[:-1 * (count + 1):-1]
        return related_product_indices

    def find_digest(file):
        return digest(file, processes=-1)[0]

    # Read list to memory
    def read_list(file):
        # for reading also binary mode is important
        with open(file, 'rb') as fp:
            n_list = pickle.load(fp)
            return n_list

    def create_tdm(tokens, tokenidx):
        new_column = [False] * len(tokenidx)
        for i in tokens:
            if str(i) in tokenidx:
                new_column[tokenidx[str(i)]] = True
        return new_column


    parser = argparse.ArgumentParser()
    parser.add_argument('--input_tdm', type=str, required=True)
    parser.add_argument('--new_malware_file', type=str, required=True)
    parser.add_argument('--count_similar_files', type=int, required=True)
    args = parser.parse_args()
    input_tdm = args.input_tdm
    newFile = args.new_malware_file
    count = args.count_similar_files

    CSVData = open(input_tdm)
    tdm = np.loadtxt(CSVData, delimiter=",")
    filelist = read_list('listfile')
    tokens = tuple(find_digest(newFile))
    tokenidx = json.load(open("tokenIndex.json"))

    newColumn = create_tdm(tokens, tokenidx)
    related_product_indices = find_most_similar_files(np.array(newColumn).reshape(1, -1), tdm, count)
    final_output = [filelist[i] for i in related_product_indices]
    #print(filelist)
    print(final_output)
    #print(related_product_indices)
